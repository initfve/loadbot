// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: start/start.proto

package proto 

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StartProcess_Run_FullMethodName = "/start.StartProcess/Run"
)

// StartProcessClient is the client API for StartProcess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StartProcessClient interface {
	Run(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
}

type startProcessClient struct {
	cc grpc.ClientConnInterface
}

func NewStartProcessClient(cc grpc.ClientConnInterface) StartProcessClient {
	return &startProcessClient{cc}
}

func (c *startProcessClient) Run(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, StartProcess_Run_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StartProcessServer is the server API for StartProcess service.
// All implementations must embed UnimplementedStartProcessServer
// for forward compatibility
type StartProcessServer interface {
	Run(context.Context, *StartRequest) (*StartResponse, error)
	mustEmbedUnimplementedStartProcessServer()
}

// UnimplementedStartProcessServer must be embedded to have forward compatible implementations.
type UnimplementedStartProcessServer struct {
}

func (UnimplementedStartProcessServer) Run(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedStartProcessServer) mustEmbedUnimplementedStartProcessServer() {}

// UnsafeStartProcessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StartProcessServer will
// result in compilation errors.
type UnsafeStartProcessServer interface {
	mustEmbedUnimplementedStartProcessServer()
}

func RegisterStartProcessServer(s grpc.ServiceRegistrar, srv StartProcessServer) {
	s.RegisterService(&StartProcess_ServiceDesc, srv)
}

func _StartProcess_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StartProcessServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StartProcess_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StartProcessServer).Run(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StartProcess_ServiceDesc is the grpc.ServiceDesc for StartProcess service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StartProcess_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "start.StartProcess",
	HandlerType: (*StartProcessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _StartProcess_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "start/start.proto",
}
