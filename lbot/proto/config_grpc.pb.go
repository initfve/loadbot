// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: lbot/proto/config.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SetConfigProcess_Run_FullMethodName = "/proto.SetConfigProcess/Run"
)

// SetConfigProcessClient is the client API for SetConfigProcess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SetConfigProcessClient interface {
	Run(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
}

type setConfigProcessClient struct {
	cc grpc.ClientConnInterface
}

func NewSetConfigProcessClient(cc grpc.ClientConnInterface) SetConfigProcessClient {
	return &setConfigProcessClient{cc}
}

func (c *setConfigProcessClient) Run(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, SetConfigProcess_Run_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SetConfigProcessServer is the server API for SetConfigProcess service.
// All implementations must embed UnimplementedSetConfigProcessServer
// for forward compatibility
type SetConfigProcessServer interface {
	Run(context.Context, *ConfigRequest) (*ConfigResponse, error)
	mustEmbedUnimplementedSetConfigProcessServer()
}

// UnimplementedSetConfigProcessServer must be embedded to have forward compatible implementations.
type UnimplementedSetConfigProcessServer struct {
}

func (UnimplementedSetConfigProcessServer) Run(context.Context, *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedSetConfigProcessServer) mustEmbedUnimplementedSetConfigProcessServer() {}

// UnsafeSetConfigProcessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SetConfigProcessServer will
// result in compilation errors.
type UnsafeSetConfigProcessServer interface {
	mustEmbedUnimplementedSetConfigProcessServer()
}

func RegisterSetConfigProcessServer(s grpc.ServiceRegistrar, srv SetConfigProcessServer) {
	s.RegisterService(&SetConfigProcess_ServiceDesc, srv)
}

func _SetConfigProcess_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetConfigProcessServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SetConfigProcess_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetConfigProcessServer).Run(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SetConfigProcess_ServiceDesc is the grpc.ServiceDesc for SetConfigProcess service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SetConfigProcess_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SetConfigProcess",
	HandlerType: (*SetConfigProcessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _SetConfigProcess_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lbot/proto/config.proto",
}
