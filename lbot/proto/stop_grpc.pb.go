// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: lbot/proto/stop.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StopProcess_Run_FullMethodName = "/proto.StopProcess/Run"
)

// StopProcessClient is the client API for StopProcess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StopProcessClient interface {
	Run(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
}

type stopProcessClient struct {
	cc grpc.ClientConnInterface
}

func NewStopProcessClient(cc grpc.ClientConnInterface) StopProcessClient {
	return &stopProcessClient{cc}
}

func (c *stopProcessClient) Run(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, StopProcess_Run_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StopProcessServer is the server API for StopProcess service.
// All implementations must embed UnimplementedStopProcessServer
// for forward compatibility
type StopProcessServer interface {
	Run(context.Context, *StopRequest) (*StopResponse, error)
	mustEmbedUnimplementedStopProcessServer()
}

// UnimplementedStopProcessServer must be embedded to have forward compatible implementations.
type UnimplementedStopProcessServer struct{}

func (UnimplementedStopProcessServer) Run(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedStopProcessServer) mustEmbedUnimplementedStopProcessServer() {}

// UnsafeStopProcessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StopProcessServer will
// result in compilation errors.
type UnsafeStopProcessServer interface {
	mustEmbedUnimplementedStopProcessServer()
}

func RegisterStopProcessServer(s grpc.ServiceRegistrar, srv StopProcessServer) {
	s.RegisterService(&StopProcess_ServiceDesc, srv)
}

func _StopProcess_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StopProcessServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StopProcess_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StopProcessServer).Run(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StopProcess_ServiceDesc is the grpc.ServiceDesc for StopProcess service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StopProcess_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StopProcess",
	HandlerType: (*StopProcessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _StopProcess_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lbot/proto/stop.proto",
}
