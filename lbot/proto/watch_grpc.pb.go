// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: lbot/proto/watch.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WatchProcess_Run_FullMethodName = "/proto.WatchProcess/Run"
)

// WatchProcessClient is the client API for WatchProcess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WatchProcessClient interface {
	Run(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (WatchProcess_RunClient, error)
}

type watchProcessClient struct {
	cc grpc.ClientConnInterface
}

func NewWatchProcessClient(cc grpc.ClientConnInterface) WatchProcessClient {
	return &watchProcessClient{cc}
}

func (c *watchProcessClient) Run(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (WatchProcess_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &WatchProcess_ServiceDesc.Streams[0], WatchProcess_Run_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &watchProcessRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchProcess_RunClient interface {
	Recv() (*WatchResponse, error)
	grpc.ClientStream
}

type watchProcessRunClient struct {
	grpc.ClientStream
}

func (x *watchProcessRunClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WatchProcessServer is the server API for WatchProcess service.
// All implementations must embed UnimplementedWatchProcessServer
// for forward compatibility
type WatchProcessServer interface {
	Run(*WatchRequest, WatchProcess_RunServer) error
	mustEmbedUnimplementedWatchProcessServer()
}

// UnimplementedWatchProcessServer must be embedded to have forward compatible implementations.
type UnimplementedWatchProcessServer struct {
}

func (UnimplementedWatchProcessServer) Run(*WatchRequest, WatchProcess_RunServer) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedWatchProcessServer) mustEmbedUnimplementedWatchProcessServer() {}

// UnsafeWatchProcessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatchProcessServer will
// result in compilation errors.
type UnsafeWatchProcessServer interface {
	mustEmbedUnimplementedWatchProcessServer()
}

func RegisterWatchProcessServer(s grpc.ServiceRegistrar, srv WatchProcessServer) {
	s.RegisterService(&WatchProcess_ServiceDesc, srv)
}

func _WatchProcess_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WatchProcessServer).Run(m, &watchProcessRunServer{stream})
}

type WatchProcess_RunServer interface {
	Send(*WatchResponse) error
	grpc.ServerStream
}

type watchProcessRunServer struct {
	grpc.ServerStream
}

func (x *watchProcessRunServer) Send(m *WatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// WatchProcess_ServiceDesc is the grpc.ServiceDesc for WatchProcess service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WatchProcess_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WatchProcess",
	HandlerType: (*WatchProcessServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _WatchProcess_Run_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lbot/proto/watch.proto",
}
